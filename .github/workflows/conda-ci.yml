name: CI Workflow

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        conda install cmake compilers make ninja pkg-config
        # Actual dependencies
        conda install -c conda-forge -c robostack-staging ycm-cmake-modules eigen ace sqlite


    - name: Download YARP [Linux]
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp

    - name: Dependencies from source [Linux]
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Configure [Linux]
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Build [Linux]
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux]
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Linux]
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
